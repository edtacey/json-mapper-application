import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Save, Upload, Download, Code } from 'lucide-react';
import Editor from '@monaco-editor/react';
import toast from 'react-hot-toast';
import { api } from '../services/api';

export const EntityEditor: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const isNew = !id || id === 'new';

  const [entityData, setEntityData] = useState({
    name: '',
    description: '',
    samplePayload: '{}'
  });

  const [activeTab, setActiveTab] = useState<'sample' | 'api' | 'schema'>('sample');

  const { data: entity, isLoading } = useQuery(
    ['entity', id],
    () => api.entities.getById(id!),
    { enabled: !isNew }
  );

  useEffect(() => {
    if (entity) {
      setEntityData({
        name: entity.name,
        description: entity.description || '',
        samplePayload: JSON.stringify(entity.metadata?.sampleData || {}, null, 2)
      });
    }
  }, [entity]);

  const createEntityMutation = useMutation(
    (data: any) => api.entities.create(data),
    {
      onSuccess: (response) => {
        toast.success('Entity created successfully');
        navigate(`/entities/${response.entity.id}`);
      },
      onError: () => {
        toast.error('Failed to create entity');
      }
    }
  );

  const updateEntityMutation = useMutation(
    (data: any) => api.entities.update(id!, data),
    {
      onSuccess: () => {
        queryClient.invalidateQueries(['entity', id]);
        toast.success('Entity updated successfully');
      },
      onError: () => {
        toast.error('Failed to update entity');
      }
    }
  );

  const handleSave = async () => {
    if (isNew) {
      try {
        const samplePayload = JSON.parse(entityData.samplePayload);
        createEntityMutation.mutate({
          samplePayload,
          entityName: entityData.name,
          description: entityData.description
        });
      } catch (error) {
        toast.error('Invalid JSON in sample payload');
      }
    } else {
      updateEntityMutation.mutate({
        name: entityData.name,
        description: entityData.description
      });
    }
  };

  const handleImportFromAPI = async (apiConfig: any) => {
    const importMutation = await api.entities.import(apiConfig);
    if (importMutation.entity) {
      navigate(`/entities/${importMutation.entity.id}`);
      toast.success('Entity imported successfully');
    }
  };

  if (isLoading) {
    return <div className="p-8 text-center">Loading...</div>;
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">
          {isNew ? 'Create New Entity' : `Edit Entity: ${entity?.name}`}
        </h1>
      </div>

      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200">
          <div className="grid grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Entity Name
              </label>
              <input
                type="text"
                value={entityData.name}
                onChange={(e) => setEntityData({ ...entityData, name: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="e.g., Order, Customer, Product"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <input
                type="text"
                value={entityData.description}
                onChange={(e) => setEntityData({ ...entityData, description: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                placeholder="Brief description of this entity"
              />
            </div>
          </div>
        </div>

        {isNew && (
          <div className="p-6">
            <div className="border-b border-gray-200 mb-6">
              <nav className="-mb-px flex space-x-8">
                <button
                  onClick={() => setActiveTab('sample')}
                  className={`
                    py-2 px-1 border-b-2 font-medium text-sm
                    ${activeTab === 'sample'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }
                  `}
                >
                  From Sample JSON
                </button>
                <button
                  onClick={() => setActiveTab('api')}
                  className={`
                    py-2 px-1 border-b-2 font-medium text-sm
                    ${activeTab === 'api'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }
                  `}
                >
                  From External API
                </button>
              </nav>
            </div>

            {activeTab === 'sample' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Sample Payload (JSON)
                </label>
                <div className="h-96 border border-gray-300 rounded-md overflow-hidden">
                  <Editor
                    language="json"
                    value={entityData.samplePayload}
                    onChange={(value) => setEntityData({ ...entityData, samplePayload: value || '{}' })}
                    options={{
                      minimap: { enabled: false },
                      fontSize: 14
                    }}
                  />
                </div>
              </div>
            )}

            {activeTab === 'api' && (
              <ApiImportForm onImport={handleImportFromAPI} />
            )}
          </div>
        )}

        {!isNew && entity && (
          <div className="p-6">
            <div className="border-b border-gray-200 mb-6">
              <nav className="-mb-px flex space-x-8">
                <button
                  onClick={() => setActiveTab('schema')}
                  className={`
                    py-2 px-1 border-b-2 font-medium text-sm
                    ${activeTab === 'schema'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }
                  `}
                >
                  Schema
                </button>
                <button
                  onClick={() => setActiveTab('sample')}
                  className={`
                    py-2 px-1 border-b-2 font-medium text-sm
                    ${activeTab === 'sample'
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }
                  `}
                >
                  Sample Data
                </button>
              </nav>
            </div>

            {activeTab === 'schema' && (
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">Inbound Schema</h3>
                  <div className="h-96 border border-gray-300 rounded-md overflow-hidden">
                    <Editor
                      language="json"
                      value={JSON.stringify(entity.inboundSchema, null, 2)}
                      options={{
                        readOnly: true,
                        minimap: { enabled: false },
                        fontSize: 12
                      }}
                    />
                  </div>
                </div>
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-3">Outbound Schema</h3>
                  <div className="h-96 border border-gray-300 rounded-md overflow-hidden">
                    <Editor
                      language="json"
                      value={JSON.stringify(entity.outboundSchema, null, 2)}
                      options={{
                        readOnly: true,
                        minimap: { enabled: false },
                        fontSize: 12
                      }}
                    />
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'sample' && (
              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-3">Sample Data</h3>
                <div className="h-96 border border-gray-300 rounded-md overflow-hidden">
                  <Editor
                    language="json"
                    value={entityData.samplePayload}
                    options={{
                      readOnly: true,
                      minimap: { enabled: false },
                      fontSize: 14
                    }}
                  />
                </div>
              </div>
            )}
          </div>
        )}

        <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-between">
          <div>
            {!isNew && (
              <button
                onClick={() => navigate(`/entities/${id}/mappings`)}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                Edit Mappings
              </button>
            )}
          </div>
          <div className="flex space-x-3">
            <button
              onClick={() => navigate('/')}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700"
            >
              <Save className="mr-2 h-4 w-4" />
              {isNew ? 'Create Entity' : 'Save Changes'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

interface ApiImportFormProps {
  onImport: (config: any) => void;
}

const ApiImportForm: React.FC<ApiImportFormProps> = ({ onImport }) => {
  const [apiConfig, setApiConfig] = useState({
    apiEndpoint: '',
    method: 'GET',
    headers: '{}',
    sampleRequest: '{}',
    entityName: ''
  });

  const handleImport = () => {
    try {
      const headers = JSON.parse(apiConfig.headers);
      const sampleRequest = JSON.parse(apiConfig.sampleRequest);
      
      onImport({
        ...apiConfig,
        headers,
        sampleRequest
      });
    } catch (error) {
      toast.error('Invalid JSON in headers or sample request');
    }
  };

  return (
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          API Endpoint
        </label>
        <input
          type="text"
          value={apiConfig.apiEndpoint}
          onChange={(e) => setApiConfig({ ...apiConfig, apiEndpoint: e.target.value })}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          placeholder="https://api.example.com/endpoint"
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            HTTP Method
          </label>
          <select
            value={apiConfig.method}
            onChange={(e) => setApiConfig({ ...apiConfig, method: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="GET">GET</option>
            <option value="POST">POST</option>
            <option value="PUT">PUT</option>
            <option value="DELETE">DELETE</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Entity Name
          </label>
          <input
            type="text"
            value={apiConfig.entityName}
            onChange={(e) => setApiConfig({ ...apiConfig, entityName: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            placeholder="e.g., Order"
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Headers (JSON)
        </label>
        <div className="h-32 border border-gray-300 rounded-md overflow-hidden">
          <Editor
            language="json"
            value={apiConfig.headers}
            onChange={(value) => setApiConfig({ ...apiConfig, headers: value || '{}' })}
            options={{
              minimap: { enabled: false },
              fontSize: 12,
              lineNumbers: 'off'
            }}
          />
        </div>
      </div>

      {apiConfig.method !== 'GET' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Sample Request Body (JSON)
          </label>
          <div className="h-32 border border-gray-300 rounded-md overflow-hidden">
            <Editor
              language="json"
              value={apiConfig.sampleRequest}
              onChange={(value) => setApiConfig({ ...apiConfig, sampleRequest: value || '{}' })}
              options={{
                minimap: { enabled: false },
                fontSize: 12,
                lineNumbers: 'off'
              }}
            />
          </div>
        </div>
      )}

      <div className="pt-4">
        <button
          onClick={handleImport}
          className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700"
        >
          <Upload className="mr-2 h-4 w-4" />
          Import from API
        </button>
      </div>
    </div>
  );
};
